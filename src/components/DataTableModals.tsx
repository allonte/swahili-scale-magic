import { Dialog, DialogContent, DialogHeader, DialogTitle } from "@/components/ui/dialog";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";

interface DataTableModalsProps {
  showShellFactors: boolean;
  showPressureFactors: boolean;
  showHeightCapacity: boolean;
  onOpenChange: (type: string, open: boolean) => void;
}

// Tank data from height to capacity (Total Energies, Uganda - Tank 02)
const tankData: [number, number][] = [
  [0, 348], [1, 359], [2, 370], [3, 381], [4, 392], [5, 403], [6, 414], [7, 425], [8, 436], [9, 447],
  [10, 458], [11, 470], [12, 482], [13, 494], [14, 506], [15, 517], [16, 529], [17, 541], [18, 553], [19, 565],
  [20, 576], [21, 589], [22, 602], [23, 614], [24, 627], [25, 639], [26, 652], [27, 665], [28, 677], [29, 690],
  [30, 702], [31, 716], [32, 729], [33, 742], [34, 756], [35, 769], [36, 782], [37, 796], [38, 809], [39, 822],
  [40, 836], [41, 850], [42, 864], [43, 878], [44, 892], [45, 906], [46, 920], [47, 934], [48, 949], [49, 963],
  [50, 977], [51, 992], [52, 1007], [53, 1021], [54, 1036], [55, 1051], [56, 1066], [57, 1081], [58, 1096], [59, 1111],
  [60, 1125], [61, 1141], [62, 1157], [63, 1172], [64, 1188], [65, 1203], [66, 1219], [67, 1234], [68, 1250], [69, 1265],
  [70, 1281], [71, 1297], [72, 1314], [73, 1330], [74, 1346], [75, 1362], [76, 1379], [77, 1395], [78, 1411], [79, 1427],
  [80, 1444], [81, 1460], [82, 1477], [83, 1494], [84, 1511], [85, 1528], [86, 1545], [87, 1562], [88, 1579], [89, 1596],
  [90, 1613], [91, 1630], [92, 1648], [93, 1665], [94, 1683], [95, 1700], [96, 1718], [97, 1735], [98, 1753], [99, 1770],
  [100, 1788], [101, 1806], [102, 1824], [103, 1842], [104, 1861], [105, 1879], [106, 1897], [107, 1915], [108, 1933], [109, 1951],
  [110, 1969], [111, 1988], [112, 2007], [113, 2026], [114, 2044], [115, 2063], [116, 2082], [117, 2100], [118, 2119], [119, 2138],
  [120, 2157], [121, 2176], [122, 2195], [123, 2214], [124, 2234], [125, 2253], [126, 2272], [127, 2291], [128, 2311], [129, 2330],
  [130, 2349], [131, 2369], [132, 2389], [133, 2409], [134, 2429], [135, 2448], [136, 2468], [137, 2488], [138, 2508], [139, 2528],
  [140, 2547], [141, 2568], [142, 2588], [143, 2608], [144, 2629], [145, 2649], [146, 2669], [147, 2690], [148, 2710], [149, 2730],
  [150, 2751], [151, 2771], [152, 2792], [153, 2813], [154, 2834], [155, 2855], [156, 2876], [157, 2896], [158, 2917], [159, 2938],
  [160, 2959], [161, 2980], [162, 3001], [163, 3023], [164, 3044], [165, 3065], [166, 3087], [167, 3108], [168, 3129], [169, 3151],
  [170, 3172], [171, 3194], [172, 3216], [173, 3237], [174, 3259], [175, 3281], [176, 3303], [177, 3325], [178, 3346], [179, 3368],
  [180, 3390], [181, 3412], [182, 3434], [183, 3457], [184, 3479], [185, 3501], [186, 3523], [187, 3546], [188, 3568], [189, 3590],
  [190, 3612], [191, 3635], [192, 3658], [193, 3681], [194, 3703], [195, 3726], [196, 3749], [197, 3771], [198, 3794], [199, 3817],
  [200, 3839], [201, 3863], [202, 3886], [203, 3909], [204, 3932], [205, 3955], [206, 3978], [207, 4001], [208, 4024], [209, 4048],
  [210, 4071], [211, 4094], [212, 4118], [213, 4141], [214, 4165], [215, 4188], [216, 4212], [217, 4236], [218, 4259], [219, 4283],
  [220, 4306], [221, 4330], [222, 4354], [223, 4378], [224, 4402], [225, 4426], [226, 4450], [227, 4474], [228, 4498], [229, 4522],
  [230, 4546], [231, 4570], [232, 4595], [233, 4619], [234, 4644], [235, 4668], [236, 4692], [237, 4717], [238, 4741], [239, 4765],
  [240, 4790], [241, 4815], [242, 4839], [243, 4864], [244, 4889], [245, 4914], [246, 4938], [247, 4963], [248, 4988], [249, 5013],
  [250, 5038], [251, 5063], [252, 5088], [253, 5113], [254, 5138], [255, 5163], [256, 5189], [257, 5214], [258, 5239], [259, 5264],
  [260, 5289], [261, 5315], [262, 5340], [263, 5366], [264, 5391], [265, 5417], [266, 5442], [267, 5468], [268, 5494], [269, 5519],
  [270, 5545], [271, 5571], [272, 5596], [273, 5622], [274, 5648], [275, 5674]
];

const shellFactors = [
  [15, 0.999890], [16, 0.999912], [17, 0.999934], [18, 0.999956], [19, 0.999978],
  [20, 1.000000], [21, 1.000022], [22, 1.000044], [23, 1.000066], [24, 1.000088]
];

const pressureFactors = [
  [15, 0.999890], [16, 0.999912], [17, 0.999934], [18, 0.999956], [19, 0.999978],
  [20, 1.000000], [21, 1.000022], [22, 1.000044], [23, 1.000066], [24, 1.000088]
];

const volumeCorrectionFactors = {
  densities: [0.500, 0.510, 0.520, 0.530, 0.540, 0.550, 0.560, 0.570, 0.580, 0.590],
  temperatures: [
    0.0, 0.5, 1.0, 1.5, 2.0, 2.5, 3.0, 3.5, 4.0, 4.5, 5.0, 5.5, 6.0, 6.5, 7.0, 7.5, 
    8.0, 8.5, 9.0, 9.5, 10.0, 10.5, 11.0, 11.5, 12.0, 12.5, 13.0, 13.5, 14.0, 14.5, 15.0,
    15.5, 16.0, 16.5, 17.0, 17.5, 18.0, 18.5, 19.0, 19.5, 20.0, 20.5, 21.0, 21.5, 22.0,
    22.5, 23.0, 23.5, 24.0, 24.5, 25.0, 25.5, 26.0, 26.5, 27.0, 27.5, 28.0, 28.5, 29.0, 29.5, 30.0
  ],
  factors: [
    // Temperature 0.0°C to 30.0°C with corresponding factors
    [1.070, 1.065, 1.060, 1.059, 1.056, 1.051, 1.050, 1.047, 1.046, 1.042],
    [1.068, 1.063, 1.059, 1.058, 1.054, 1.050, 1.049, 1.045, 1.045, 1.041],
    [1.066, 1.061, 1.057, 1.056, 1.053, 1.048, 1.048, 1.044, 1.044, 1.040],
    [1.064, 1.060, 1.056, 1.055, 1.051, 1.047, 1.046, 1.043, 1.042, 1.039],
    [1.062, 1.058, 1.054, 1.053, 1.050, 1.046, 1.045, 1.042, 1.041, 1.038],
    [1.060, 1.056, 1.052, 1.052, 1.048, 1.044, 1.044, 1.041, 1.040, 1.037],
    [1.059, 1.055, 1.051, 1.050, 1.047, 1.043, 1.043, 1.039, 1.039, 1.036],
    [1.057, 1.053, 1.049, 1.048, 1.045, 1.042, 1.041, 1.038, 1.038, 1.034],
    [1.055, 1.051, 1.048, 1.047, 1.044, 1.040, 1.040, 1.037, 1.036, 1.033],
    [1.053, 1.050, 1.046, 1.045, 1.043, 1.039, 1.039, 1.036, 1.035, 1.032],
    [1.051, 1.048, 1.045, 1.044, 1.041, 1.038, 1.037, 1.035, 1.034, 1.031],
    [1.049, 1.046, 1.043, 1.042, 1.040, 1.037, 1.036, 1.033, 1.033, 1.030],
    [1.048, 1.045, 1.041, 1.041, 1.038, 1.035, 1.035, 1.032, 1.032, 1.029],
    [1.046, 1.043, 1.040, 1.039, 1.037, 1.034, 1.033, 1.031, 1.031, 1.028],
    [1.044, 1.041, 1.038, 1.038, 1.035, 1.033, 1.032, 1.030, 1.029, 1.027],
    [1.042, 1.040, 1.037, 1.036, 1.034, 1.031, 1.031, 1.029, 1.028, 1.026],
    [1.041, 1.038, 1.035, 1.035, 1.033, 1.030, 1.030, 1.027, 1.027, 1.025],
    [1.039, 1.036, 1.034, 1.033, 1.031, 1.029, 1.028, 1.026, 1.026, 1.024],
    [1.037, 1.035, 1.032, 1.032, 1.030, 1.027, 1.027, 1.025, 1.025, 1.023],
    [1.035, 1.033, 1.031, 1.030, 1.028, 1.026, 1.026, 1.024, 1.024, 1.022],
    [1.034, 1.031, 1.029, 1.029, 1.027, 1.025, 1.025, 1.023, 1.022, 1.021],
    [1.032, 1.030, 1.028, 1.027, 1.026, 1.024, 1.023, 1.022, 1.021, 1.020],
    [1.030, 1.028, 1.026, 1.026, 1.024, 1.022, 1.022, 1.020, 1.020, 1.019],
    [1.028, 1.027, 1.025, 1.024, 1.023, 1.021, 1.021, 1.019, 1.019, 1.017],
    [1.027, 1.025, 1.023, 1.023, 1.022, 1.020, 1.020, 1.018, 1.018, 1.016],
    [1.025, 1.023, 1.022, 1.021, 1.020, 1.019, 1.018, 1.017, 1.017, 1.015],
    [1.023, 1.022, 1.020, 1.020, 1.019, 1.017, 1.017, 1.016, 1.016, 1.014],
    [1.022, 1.020, 1.019, 1.019, 1.017, 1.016, 1.016, 1.015, 1.015, 1.013],
    [1.020, 1.019, 1.017, 1.017, 1.016, 1.015, 1.015, 1.014, 1.013, 1.012],
    [1.018, 1.017, 1.016, 1.016, 1.015, 1.014, 1.013, 1.012, 1.012, 1.011],
    [1.017, 1.015, 1.014, 1.014, 1.013, 1.012, 1.012, 1.011, 1.011, 1.010],
    [1.015, 1.014, 1.013, 1.013, 1.012, 1.011, 1.011, 1.010, 1.010, 1.009],
    [1.013, 1.012, 1.012, 1.011, 1.011, 1.010, 1.010, 1.009, 1.009, 1.008],
    [1.012, 1.011, 1.010, 1.010, 1.009, 1.009, 1.008, 1.008, 1.008, 1.007],
    [1.010, 1.009, 1.009, 1.008, 1.008, 1.007, 1.007, 1.007, 1.007, 1.006],
    [1.008, 1.008, 1.007, 1.007, 1.007, 1.006, 1.006, 1.006, 1.006, 1.005],
    [1.007, 1.006, 1.006, 1.006, 1.005, 1.005, 1.005, 1.004, 1.004, 1.004],
    [1.005, 1.005, 1.004, 1.004, 1.004, 1.004, 1.004, 1.003, 1.003, 1.003],
    [1.003, 1.003, 1.003, 1.003, 1.003, 1.002, 1.002, 1.002, 1.002, 1.002],
    [1.002, 1.002, 1.001, 1.001, 1.001, 1.001, 1.001, 1.001, 1.001, 1.001],
    [1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000], // 20°C baseline
    [0.998, 0.998, 0.999, 0.999, 0.999, 0.999, 0.999, 0.999, 0.999, 0.999],
    [0.997, 0.997, 0.997, 0.997, 0.997, 0.998, 0.998, 0.998, 0.998, 0.998],
    [0.995, 0.995, 0.996, 0.996, 0.996, 0.996, 0.996, 0.997, 0.997, 0.997],
    [0.994, 0.994, 0.994, 0.994, 0.995, 0.995, 0.995, 0.996, 0.996, 0.996],
    [0.992, 0.992, 0.993, 0.993, 0.993, 0.994, 0.994, 0.994, 0.995, 0.995],
    [0.990, 0.991, 0.992, 0.992, 0.992, 0.993, 0.993, 0.993, 0.993, 0.994],
    [0.989, 0.989, 0.990, 0.990, 0.991, 0.992, 0.992, 0.992, 0.992, 0.993],
    [0.987, 0.988, 0.989, 0.989, 0.990, 0.990, 0.990, 0.991, 0.991, 0.992],
    [0.986, 0.986, 0.987, 0.988, 0.988, 0.989, 0.989, 0.990, 0.990, 0.991],
    [0.984, 0.985, 0.986, 0.986, 0.987, 0.988, 0.988, 0.989, 0.989, 0.990],
    [0.982, 0.984, 0.985, 0.985, 0.986, 0.987, 0.987, 0.988, 0.988, 0.989],
    [0.981, 0.982, 0.983, 0.983, 0.984, 0.986, 0.986, 0.987, 0.987, 0.988],
    [0.979, 0.981, 0.982, 0.982, 0.983, 0.984, 0.985, 0.986, 0.986, 0.987],
    [0.978, 0.979, 0.980, 0.981, 0.982, 0.983, 0.983, 0.985, 0.985, 0.986],
    [0.976, 0.978, 0.979, 0.979, 0.981, 0.982, 0.982, 0.984, 0.984, 0.985],
    [0.975, 0.976, 0.978, 0.978, 0.979, 0.981, 0.981, 0.982, 0.983, 0.984],
    [0.973, 0.975, 0.976, 0.977, 0.978, 0.980, 0.980, 0.981, 0.982, 0.983],
    [0.972, 0.973, 0.975, 0.975, 0.977, 0.979, 0.979, 0.980, 0.981, 0.982],
    [0.970, 0.972, 0.974, 0.974, 0.976, 0.977, 0.978, 0.979, 0.980, 0.981],
    [0.969, 0.970, 0.972, 0.973, 0.974, 0.976, 0.977, 0.978, 0.978, 0.980] // 30°C
  ]
};

const DataTableModals = ({ showShellFactors, showPressureFactors, showHeightCapacity, onOpenChange }: DataTableModalsProps) => {
  return (
    <>
      {/* Shell Correction Factors Modal */}
      <Dialog open={showShellFactors} onOpenChange={(open) => onOpenChange('shell', open)}>
        <DialogContent className="max-w-2xl max-h-[80vh] overflow-auto">
          <DialogHeader>
            <DialogTitle>Shell Correction Factors</DialogTitle>
          </DialogHeader>
          <div className="space-y-4">
            <p className="text-sm text-muted-foreground">
              Shell correction factors are applied based on tank shell temperature to account for thermal expansion.
            </p>
            <Table>
              <TableHeader>
                <TableRow>
                  <TableHead>Temperature (°C)</TableHead>
                  <TableHead>Shell Correction Factor</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {shellFactors.map(([temp, factor]) => (
                  <TableRow key={temp}>
                    <TableCell>{temp}</TableCell>
                    <TableCell>{factor.toFixed(6)}</TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          </div>
        </DialogContent>
      </Dialog>

      {/* Pressure Factors Modal */}
      <Dialog open={showPressureFactors} onOpenChange={(open) => onOpenChange('pressure', open)}>
        <DialogContent className="max-w-xl max-h-[80vh] overflow-auto">
          <DialogHeader>
            <DialogTitle>Pressure Correction Factors</DialogTitle>
          </DialogHeader>
          <div className="space-y-4">
            <p className="text-sm text-muted-foreground">
              Pressure correction factors (PCF) are applied based on tank pressure to account for pressure effects.
            </p>
            <Table>
              <TableHeader>
                <TableRow>
                  <TableHead>Temperature (°C)</TableHead>
                  <TableHead>Correction Factor</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {pressureFactors.map(([temp, factor]) => (
                  <TableRow key={temp}>
                    <TableCell>{temp}</TableCell>
                    <TableCell>{factor.toFixed(6)}</TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          </div>
        </DialogContent>
      </Dialog>

      {/* Height↔Capacity Table Modal */}
      <Dialog open={showHeightCapacity} onOpenChange={(open) => onOpenChange('height', open)}>
        <DialogContent className="max-w-2xl max-h-[80vh] overflow-auto">
          <DialogHeader>
            <DialogTitle>Height ↔ Capacity Table</DialogTitle>
          </DialogHeader>
          <div className="space-y-4">
            <div className="grid grid-cols-2 gap-4 text-sm">
              <div>
                <strong>Tank:</strong> Tank 02
              </div>
              <div>
                <strong>Owner:</strong> Total Energies Jinja
              </div>
              <div>
                <strong>Location:</strong> Jinja, Uganda
              </div>
              <div>
                <strong>Type:</strong> LPG Bullet Tank
              </div>
              <div>
                <strong>Diameter:</strong> 2422 mm
              </div>
              <div>
                <strong>Length:</strong> 15000 mm
              </div>
              <div>
                <strong>Capacity:</strong> 98,682 Liters
              </div>
              <div>
                <strong>Calibration:</strong> 29/06/2025
              </div>
            </div>
            <Table>
              <TableHeader>
                <TableRow>
                  <TableHead>Height (mm)</TableHead>
                  <TableHead>Capacity (L)</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {tankData.map(([height, capacity], index) => (
                  <TableRow key={index}>
                    <TableCell>{height}</TableCell>
                    <TableCell>{capacity.toLocaleString()}</TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          </div>
        </DialogContent>
      </Dialog>
    </>
  );
};

export default DataTableModals;