import { Dialog, DialogContent, DialogHeader, DialogTitle } from "@/components/ui/dialog";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";

interface DataTableModalsProps {
  showShellFactors: boolean;
  showPressureFactors: boolean;
  showHeightCapacity: boolean;
  onOpenChange: (type: string, open: boolean) => void;
}

// Tank data from height to capacity
const tankData: [number, number][] = [
  [0, 202], [1, 214], [2, 226], [3, 237], [4, 249], [5, 261], [6, 273], [7, 285], [8, 296], [9, 308],
  [10, 319], [11, 331], [12, 343], [13, 354], [14, 366], [15, 378], [16, 390], [17, 402], [18, 413], [19, 425],
  [20, 437], [21, 449], [22, 461], [23, 472], [24, 484], [25, 496], [26, 508], [27, 520], [28, 531], [29, 543],
  [30, 555], [31, 567], [32, 579], [33, 590], [34, 602], [35, 614], [36, 626], [37, 638], [38, 649], [39, 661],
  [40, 672], [41, 684], [42, 696], [43, 707], [44, 719], [45, 731], [46, 743], [47, 755], [48, 766], [49, 778],
  [50, 790], [51, 802], [52, 814], [53, 825], [54, 837], [55, 849], [56, 861], [57, 873], [58, 884], [59, 896],
  [60, 907], [61, 919], [62, 931], [63, 942], [64, 954], [65, 966], [66, 978], [67, 990], [68, 1001], [69, 1013],
  [70, 1025], [71, 1037], [72, 1049], [73, 1060], [74, 1072], [75, 1084], [76, 1096], [77, 1108], [78, 1119], [79, 1131],
  [80, 1142], [81, 1154], [82, 1166], [83, 1177], [84, 1189], [85, 1201], [86, 1213], [87, 1225], [88, 1236], [89, 1248],
  [90, 1260], [91, 1272], [92, 1284], [93, 1295], [94, 1307], [95, 1319], [96, 1331], [97, 1343], [98, 1354], [99, 1366],
  [100, 1378], [101, 1397], [102, 1416], [103, 1434], [104, 1453], [105, 1472], [106, 1491], [107, 1510], [108, 1528], [109, 1547],
  [110, 1565], [111, 1584], [112, 1603], [113, 1621], [114, 1640], [115, 1659], [116, 1678], [117, 1697], [118, 1715], [119, 1734],
  [120, 1753], [121, 1772], [122, 1791], [123, 1809], [124, 1828], [125, 1847], [126, 1866], [127, 1885], [128, 1903], [129, 1922],
  [130, 1940], [131, 1959], [132, 1978], [133, 1996], [134, 2015], [135, 2034], [136, 2053], [137, 2072], [138, 2090], [184, 2953],
  [230, 3960], [276, 5045], [322, 6212], [368, 7470], [414, 8773], [460, 10174], [506, 11593], [552, 13115], [598, 14638], [644, 16257],
  [690, 17882], [736, 19574], [782, 21284], [828, 23039], [874, 24821], [920, 26630], [966, 28473], [1012, 30327], [1058, 32218], [1104, 34112],
  [1150, 36041], [1196, 37968], [1242, 39922], [1288, 41878], [1334, 43847], [1380, 45820], [1426, 47797], [1472, 49777], [1518, 51756], [1564, 53733],
  [1610, 55707], [1656, 57671], [1703, 59677], [1749, 61618], [1795, 63558], [1841, 65470], [1887, 67377], [1933, 69251], [1979, 71113], [2025, 72945],
  [2071, 74749], [2117, 76530], [2163, 78266], [2209, 79987], [2255, 81642], [2301, 83294], [2347, 84850], [2393, 86406], [2439, 87865], [2485, 89305],
  [2531, 90652], [2577, 91954], [2623, 93173], [2669, 94308], [2715, 95375], [2761, 96299], [2807, 97180], [2853, 97808], [2899, 98437], [2946, 98676],
  [2954, 98716]
];

const pressureFactors = [
  [15, 0.999890], [16, 0.999912], [17, 0.999934], [18, 0.999956], [19, 0.999978],
  [20, 1.000000], [21, 1.000022], [22, 1.000044], [23, 1.000066], [24, 1.000088]
];

const volumeCorrectionFactors = {
  densities: [0.500, 0.510, 0.520, 0.530, 0.540, 0.550, 0.560, 0.570, 0.580, 0.590],
  temperatures: [
    0.0, 0.5, 1.0, 1.5, 2.0, 2.5, 3.0, 3.5, 4.0, 4.5, 5.0, 5.5, 6.0, 6.5, 7.0, 7.5, 
    8.0, 8.5, 9.0, 9.5, 10.0, 10.5, 11.0, 11.5, 12.0, 12.5, 13.0, 13.5, 14.0, 14.5, 15.0,
    15.5, 16.0, 16.5, 17.0, 17.5, 18.0, 18.5, 19.0, 19.5, 20.0, 20.5, 21.0, 21.5, 22.0,
    22.5, 23.0, 23.5, 24.0, 24.5, 25.0, 25.5, 26.0, 26.5, 27.0, 27.5, 28.0, 28.5, 29.0, 29.5, 30.0
  ],
  factors: [
    // Temperature 0.0°C to 30.0°C with corresponding factors
    [1.070, 1.065, 1.060, 1.059, 1.056, 1.051, 1.050, 1.047, 1.046, 1.042],
    [1.068, 1.063, 1.059, 1.058, 1.054, 1.050, 1.049, 1.045, 1.045, 1.041],
    [1.066, 1.061, 1.057, 1.056, 1.053, 1.048, 1.048, 1.044, 1.044, 1.040],
    [1.064, 1.060, 1.056, 1.055, 1.051, 1.047, 1.046, 1.043, 1.042, 1.039],
    [1.062, 1.058, 1.054, 1.053, 1.050, 1.046, 1.045, 1.042, 1.041, 1.038],
    [1.060, 1.056, 1.052, 1.052, 1.048, 1.044, 1.044, 1.041, 1.040, 1.037],
    [1.059, 1.055, 1.051, 1.050, 1.047, 1.043, 1.043, 1.039, 1.039, 1.036],
    [1.057, 1.053, 1.049, 1.048, 1.045, 1.042, 1.041, 1.038, 1.038, 1.034],
    [1.055, 1.051, 1.048, 1.047, 1.044, 1.040, 1.040, 1.037, 1.036, 1.033],
    [1.053, 1.050, 1.046, 1.045, 1.043, 1.039, 1.039, 1.036, 1.035, 1.032],
    [1.051, 1.048, 1.045, 1.044, 1.041, 1.038, 1.037, 1.035, 1.034, 1.031],
    [1.049, 1.046, 1.043, 1.042, 1.040, 1.037, 1.036, 1.033, 1.033, 1.030],
    [1.048, 1.045, 1.041, 1.041, 1.038, 1.035, 1.035, 1.032, 1.032, 1.029],
    [1.046, 1.043, 1.040, 1.039, 1.037, 1.034, 1.033, 1.031, 1.031, 1.028],
    [1.044, 1.041, 1.038, 1.038, 1.035, 1.033, 1.032, 1.030, 1.029, 1.027],
    [1.042, 1.040, 1.037, 1.036, 1.034, 1.031, 1.031, 1.029, 1.028, 1.026],
    [1.041, 1.038, 1.035, 1.035, 1.033, 1.030, 1.030, 1.027, 1.027, 1.025],
    [1.039, 1.036, 1.034, 1.033, 1.031, 1.029, 1.028, 1.026, 1.026, 1.024],
    [1.037, 1.035, 1.032, 1.032, 1.030, 1.027, 1.027, 1.025, 1.025, 1.023],
    [1.035, 1.033, 1.031, 1.030, 1.028, 1.026, 1.026, 1.024, 1.024, 1.022],
    [1.034, 1.031, 1.029, 1.029, 1.027, 1.025, 1.025, 1.023, 1.022, 1.021],
    [1.032, 1.030, 1.028, 1.027, 1.026, 1.024, 1.023, 1.022, 1.021, 1.020],
    [1.030, 1.028, 1.026, 1.026, 1.024, 1.022, 1.022, 1.020, 1.020, 1.019],
    [1.028, 1.027, 1.025, 1.024, 1.023, 1.021, 1.021, 1.019, 1.019, 1.017],
    [1.027, 1.025, 1.023, 1.023, 1.022, 1.020, 1.020, 1.018, 1.018, 1.016],
    [1.025, 1.023, 1.022, 1.021, 1.020, 1.019, 1.018, 1.017, 1.017, 1.015],
    [1.023, 1.022, 1.020, 1.020, 1.019, 1.017, 1.017, 1.016, 1.016, 1.014],
    [1.022, 1.020, 1.019, 1.019, 1.017, 1.016, 1.016, 1.015, 1.015, 1.013],
    [1.020, 1.019, 1.017, 1.017, 1.016, 1.015, 1.015, 1.014, 1.013, 1.012],
    [1.018, 1.017, 1.016, 1.016, 1.015, 1.014, 1.013, 1.012, 1.012, 1.011],
    [1.017, 1.015, 1.014, 1.014, 1.013, 1.012, 1.012, 1.011, 1.011, 1.010],
    [1.015, 1.014, 1.013, 1.013, 1.012, 1.011, 1.011, 1.010, 1.010, 1.009],
    [1.013, 1.012, 1.012, 1.011, 1.011, 1.010, 1.010, 1.009, 1.009, 1.008],
    [1.012, 1.011, 1.010, 1.010, 1.009, 1.009, 1.008, 1.008, 1.008, 1.007],
    [1.010, 1.009, 1.009, 1.008, 1.008, 1.007, 1.007, 1.007, 1.007, 1.006],
    [1.008, 1.008, 1.007, 1.007, 1.007, 1.006, 1.006, 1.006, 1.006, 1.005],
    [1.007, 1.006, 1.006, 1.006, 1.005, 1.005, 1.005, 1.004, 1.004, 1.004],
    [1.005, 1.005, 1.004, 1.004, 1.004, 1.004, 1.004, 1.003, 1.003, 1.003],
    [1.003, 1.003, 1.003, 1.003, 1.003, 1.002, 1.002, 1.002, 1.002, 1.002],
    [1.002, 1.002, 1.001, 1.001, 1.001, 1.001, 1.001, 1.001, 1.001, 1.001],
    [1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000], // 20°C baseline
    [0.998, 0.998, 0.999, 0.999, 0.999, 0.999, 0.999, 0.999, 0.999, 0.999],
    [0.997, 0.997, 0.997, 0.997, 0.997, 0.998, 0.998, 0.998, 0.998, 0.998],
    [0.995, 0.995, 0.996, 0.996, 0.996, 0.996, 0.996, 0.997, 0.997, 0.997],
    [0.994, 0.994, 0.994, 0.994, 0.995, 0.995, 0.995, 0.996, 0.996, 0.996],
    [0.992, 0.992, 0.993, 0.993, 0.993, 0.994, 0.994, 0.994, 0.995, 0.995],
    [0.990, 0.991, 0.992, 0.992, 0.992, 0.993, 0.993, 0.993, 0.993, 0.994],
    [0.989, 0.989, 0.990, 0.990, 0.991, 0.992, 0.992, 0.992, 0.992, 0.993],
    [0.987, 0.988, 0.989, 0.989, 0.990, 0.990, 0.990, 0.991, 0.991, 0.992],
    [0.986, 0.986, 0.987, 0.988, 0.988, 0.989, 0.989, 0.990, 0.990, 0.991],
    [0.984, 0.985, 0.986, 0.986, 0.987, 0.988, 0.988, 0.989, 0.989, 0.990],
    [0.982, 0.984, 0.985, 0.985, 0.986, 0.987, 0.987, 0.988, 0.988, 0.989],
    [0.981, 0.982, 0.983, 0.983, 0.984, 0.986, 0.986, 0.987, 0.987, 0.988],
    [0.979, 0.981, 0.982, 0.982, 0.983, 0.984, 0.985, 0.986, 0.986, 0.987],
    [0.978, 0.979, 0.980, 0.981, 0.982, 0.983, 0.983, 0.985, 0.985, 0.986],
    [0.976, 0.978, 0.979, 0.979, 0.981, 0.982, 0.982, 0.984, 0.984, 0.985],
    [0.975, 0.976, 0.978, 0.978, 0.979, 0.981, 0.981, 0.982, 0.983, 0.984],
    [0.973, 0.975, 0.976, 0.977, 0.978, 0.980, 0.980, 0.981, 0.982, 0.983],
    [0.972, 0.973, 0.975, 0.975, 0.977, 0.979, 0.979, 0.980, 0.981, 0.982],
    [0.970, 0.972, 0.974, 0.974, 0.976, 0.977, 0.978, 0.979, 0.980, 0.981],
    [0.969, 0.970, 0.972, 0.973, 0.974, 0.976, 0.977, 0.978, 0.978, 0.980] // 30°C
  ]
};

const DataTableModals = ({ showShellFactors, showPressureFactors, showHeightCapacity, onOpenChange }: DataTableModalsProps) => {
  return (
    <>
      {/* Shell Correction Factors Modal */}
      <Dialog open={showShellFactors} onOpenChange={(open) => onOpenChange('shell', open)}>
        <DialogContent className="max-w-2xl max-h-[80vh] overflow-auto">
          <DialogHeader>
            <DialogTitle>Shell Correction Factors</DialogTitle>
          </DialogHeader>
          <div className="space-y-4">
            <p className="text-sm text-muted-foreground">
              Shell correction factors are applied based on tank shell temperature to account for thermal expansion.
            </p>
            <Table>
              <TableHeader>
                <TableRow>
                  <TableHead>Temperature (°C)</TableHead>
                  <TableHead>Shell Correction Factor</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {Array.from({length: 21}, (_, i) => {
                  const temp = i + 10; // 10°C to 30°C
                  const scf = 1.000000; // Placeholder - shell factors would be similar to pressure factors
                  return (
                    <TableRow key={temp}>
                      <TableCell>{temp}</TableCell>
                      <TableCell>{scf.toFixed(6)}</TableCell>
                    </TableRow>
                  );
                })}
              </TableBody>
            </Table>
          </div>
        </DialogContent>
      </Dialog>

      {/* Pressure Factors Modal */}
      <Dialog open={showPressureFactors} onOpenChange={(open) => onOpenChange('pressure', open)}>
        <DialogContent className="max-w-xl max-h-[80vh] overflow-auto">
          <DialogHeader>
            <DialogTitle>Pressure Correction Factors</DialogTitle>
          </DialogHeader>
          <div className="space-y-4">
            <p className="text-sm text-muted-foreground">
              Pressure correction factors (PCF) are applied based on tank pressure to account for pressure effects.
            </p>
            <Table>
              <TableHeader>
                <TableRow>
                  <TableHead>Temperature (°C)</TableHead>
                  <TableHead>Correction Factor</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {pressureFactors.map(([temp, factor]) => (
                  <TableRow key={temp}>
                    <TableCell>{temp}</TableCell>
                    <TableCell>{factor.toFixed(6)}</TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          </div>
        </DialogContent>
      </Dialog>

      {/* Height↔Capacity Table Modal */}
      <Dialog open={showHeightCapacity} onOpenChange={(open) => onOpenChange('height', open)}>
        <DialogContent className="max-w-2xl max-h-[80vh] overflow-auto">
          <DialogHeader>
            <DialogTitle>Height ↔ Capacity Table</DialogTitle>
          </DialogHeader>
          <div className="space-y-4">
            <div className="grid grid-cols-2 gap-4 text-sm">
              <div>
                <strong>Tank:</strong> Tank 02
              </div>
              <div>
                <strong>Owner:</strong> Total Energies Jinja
              </div>
              <div>
                <strong>Location:</strong> Jinja, Uganda
              </div>
              <div>
                <strong>Type:</strong> LPG Bullet Tank
              </div>
              <div>
                <strong>Diameter:</strong> 2422 mm
              </div>
              <div>
                <strong>Length:</strong> 15000 mm
              </div>
              <div>
                <strong>Capacity:</strong> 98,682 Liters
              </div>
              <div>
                <strong>Calibration:</strong> 29/06/2025
              </div>
            </div>
            <Table>
              <TableHeader>
                <TableRow>
                  <TableHead>Height (mm)</TableHead>
                  <TableHead>Capacity (L)</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {tankData.map(([height, capacity], index) => (
                  <TableRow key={index}>
                    <TableCell>{height}</TableCell>
                    <TableCell>{capacity.toLocaleString()}</TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          </div>
        </DialogContent>
      </Dialog>
    </>
  );
};

export default DataTableModals;
